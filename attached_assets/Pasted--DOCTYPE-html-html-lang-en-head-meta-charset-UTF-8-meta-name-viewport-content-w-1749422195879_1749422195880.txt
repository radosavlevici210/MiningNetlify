<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ethereum Mining Dashboard</title>
  <style>
    :root {
      --primary: #3498db;
      --secondary: #2ecc71;
      --dark: #2c3e50;
      --light: #ecf0f1;
      --danger: #e74c3c;
      --warning: #f39c12;
    }

```
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: var(--dark);
  background-color: #f5f7fa;
  padding: 20px;
}

.container {
  max-width: 1000px;
  margin: 0 auto;
  background: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 30px;
}

header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  border-bottom: 1px solid #eee;
  padding-bottom: 20px;
}

h1 {
  color: var(--primary);
  font-size: 2.2rem;
}

.warning-banner {
  background-color: #fff8e1;
  border-left: 5px solid var(--warning);
  padding: 15px;
  margin: 20px 0;
  border-radius: 5px;
}

.dashboard {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-bottom: 30px;
}

.card {
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  padding: 20px;
  border: 1px solid #eee;
}

.card-title {
  font-size: 1.1rem;
  color: var(--dark);
  margin-bottom: 15px;
  display: flex;
  align-items: center;
}

.card-title svg {
  margin-right: 8px;
  color: var(--primary);
}

.stat-value {
  font-size: 1.8rem;
  font-weight: bold;
  color: var(--primary);
  margin: 10px 0;
}

.stat-label {
  font-size: 0.9rem;
  color: #7f8c8d;
}

.controls {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 20px;
  margin-top: 20px;
}

button {
  background-color: var(--primary);
  color: white;
  border: none;
  padding: 12px 20px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s;
  display: flex;
  align-items: center;
  justify-content: center;
}

button svg {
  margin-right: 8px;
}

button:hover {
  background-color: #2980b9;
}

button:disabled {
  background-color: #bdc3c7;
  cursor: not-allowed;
}

button.start {
  background-color: var(--secondary);
}

button.start:hover {
  background-color: #27ae60;
}

button.stop {
  background-color: var(--danger);
}

button.stop:hover {
  background-color: #c0392b;
}

.wallet-section {
  margin-top: 30px;
}

.wallet-input {
  display: flex;
  margin-bottom: 20px;
}

input {
  flex: 1;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 5px 0 0 5px;
  font-size: 1rem;
}

.wallet-input button {
  border-radius: 0 5px 5px 0;
}

.logs {
  height: 200px;
  background-color: #2c3e50;
  color: #ecf0f1;
  padding: 15px;
  border-radius: 5px;
  font-family: 'Courier New', Courier, monospace;
  overflow-y: auto;
  margin-top: 20px;
}

.log-entry {
  margin-bottom: 5px;
  font-size: 0.9rem;
}

.timestamp {
  color: var(--warning);
  margin-right: 8px;
}

.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  background-color: var(--primary);
  color: white;
  padding: 15px 20px;
  border-radius: 5px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transform: translateX(120%);
  transition: transform 0.3s ease-out;
  z-index: 1000;
}

.notification.show {
  transform: translateX(0);
}

.charts {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-top: 30px;
}

.chart-container {
  height: 250px;
  position: relative;
}

@media (max-width: 768px) {
  .dashboard, .controls, .charts {
    grid-template-columns: 1fr;
  }
}

.info-tooltip {
  display: inline-block;
  margin-left: 5px;
  color: var(--primary);
  cursor: help;
  position: relative;
}

.info-tooltip .tooltip-text {
  visibility: hidden;
  width: 250px;
  background-color: var(--dark);
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 10px;
  position: absolute;
  z-index: 1;
  bottom: 125%;
  left: 50%;
  transform: translateX(-50%);
  opacity: 0;
  transition: opacity 0.3s;
  font-size: 0.8rem;
  pointer-events: none;
}

.info-tooltip:hover .tooltip-text {
  visibility: visible;
  opacity: 1;
}
```

  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Ethereum Mining Dashboard</h1>
      <div class="network-status" id="network-status">Checking status...</div>
    </header>

```
<div class="warning-banner">
  <strong>IMPORTANT:</strong> This is an educational tool. Ethereum has transitioned to Proof of Stake,
  which means traditional mining is no longer used to validate transactions.
  This dashboard simulates the mining process for learning purposes.
</div>

<div class="dashboard">
  <div class="card">
    <div class="card-title">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <polyline points="12 6 12 12 16 14"></polyline>
      </svg>
      Hashrate
      <span class="info-tooltip">ⓘ
        <span class="tooltip-text">Hashrate is the computational power of your mining operation. Higher is better.</span>
      </span>
    </div>
    <div class="stat-value" id="hashrate">0 H/s</div>
    <div class="stat-label">Current mining speed</div>
  </div>
  
  <div class="card">
    <div class="card-title">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
      </svg>
      Blocks Mined
      <span class="info-tooltip">ⓘ
        <span class="tooltip-text">The number of blocks you've successfully mined.</span>
      </span>
    </div>
    <div class="stat-value" id="blocks-mined">0</div>
    <div class="stat-label">Total successful blocks</div>
  </div>
  
  <div class="card">
    <div class="card-title">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="12" y1="1" x2="12" y2="23"></line>
        <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
      </svg>
      Balance
      <span class="info-tooltip">ⓘ
        <span class="tooltip-text">Your current Ethereum balance.</span>
      </span>
    </div>
    <div class="stat-value" id="balance">0.00000 ETH</div>
    <div class="stat-label">Current wallet balance</div>
  </div>
  
  <div class="card">
    <div class="card-title">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
      Mining Status
      <span class="info-tooltip">ⓘ
        <span class="tooltip-text">The current status of your mining operation.</span>
      </span>
    </div>
    <div class="stat-value" id="mining-status">Inactive</div>
    <div class="stat-label">Current mining state</div>
  </div>
</div>

<div class="controls">
  <button class="start" id="start-mining">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <polygon points="5 3 19 12 5 21 5 3"></polygon>
    </svg>
    Start Mining
  </button>
  
  <button class="stop" id="stop-mining" disabled>
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <rect x="6" y="4" width="4" height="16"></rect>
      <rect x="14" y="4" width="4" height="16"></rect>
    </svg>
    Stop Mining
  </button>
  
  <button id="check-balance">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
      <circle cx="12" cy="7" r="4"></circle>
    </svg>
    Check Balance
  </button>
</div>

<div class="wallet-section">
  <h2>Wallet Configuration</h2>
  <div class="wallet-input">
    <input type="text" id="wallet-address" placeholder="Enter your Ethereum wallet address" value="0x557E3d20c04e425D2e534cc296f893204D72d5BA">
    <button id="update-wallet">Update</button>
  </div>
  <div id="wallet-status">Current Wallet: <span id="current-wallet">0x557E3d20c04e425D2e534cc296f893204D72d5BA</span></div>
</div>

<h2>Mining Logs</h2>
<div class="logs" id="logs">
  <div class="log-entry"><span class="timestamp">[System]</span> Mining dashboard initialized. Ready to connect.</div>
</div>

<div class="charts">
  <div class="card">
    <div class="card-title">Hashrate History</div>
    <div class="chart-container" id="hashrate-chart">
      <canvas id="hashrate-canvas"></canvas>
    </div>
  </div>
  
  <div class="card">
    <div class="card-title">Earnings History</div>
    <div class="chart-container" id="earnings-chart">
      <canvas id="earnings-canvas"></canvas>
    </div>
  </div>
</div>
```

  </div>

  <div class="notification" id="notification">Notification message here</div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>

  <script>
    // Global variables
    let isMining = false;
    let wallet = '0x557E3d20c04e425D2e534cc296f893204D72d5BA';
    let balance = 0;
    let blocksMined = 0;
    let hashrate = 0;
    let hashrateInterval;
    let miningInterval;
    let balanceUpdateInterval;
    let rpcURL = 'https://ethereum-mainnet.rpc.io'; // Replace with your actual Ethereum node URL or API
    let hashrateHistory = Array(20).fill(0);
    let earningsHistory = Array(20).fill(0);
    
    // DOM Elements
    const logs = document.getElementById('logs');
    const hashrateDisplay = document.getElementById('hashrate');
    const blocksMinedDisplay = document.getElementById('blocks-mined');
    const balanceDisplay = document.getElementById('balance');
    const miningStatusDisplay = document.getElementById('mining-status');
    const startMiningButton = document.getElementById('start-mining');
    const stopMiningButton = document.getElementById('stop-mining');
    const checkBalanceButton = document.getElementById('check-balance');
    const walletAddressInput = document.getElementById('wallet-address');
    const updateWalletButton = document.getElementById('update-wallet');
    const currentWalletDisplay = document.getElementById('current-wallet');
    const networkStatusDisplay = document.getElementById('network-status');
    const notificationElement = document.getElementById('notification');
    
    // Charts
    const hashrateCtx = document.getElementById('hashrate-canvas').getContext('2d');
    const earningsCtx = document.getElementById('earnings-canvas').getContext('2d');
    
    // Initialize charts
    const hashrateChart = new Chart(hashrateCtx, {
      type: 'line',
      data: {
        labels: Array(20).fill(''),
        datasets: [{
          label: 'Hashrate (H/s)',
          data: hashrateHistory,
          fill: false,
          borderColor: '#3498db',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
    
    const earningsChart = new Chart(earningsCtx, {
      type: 'line',
      data: {
        labels: Array(20).fill(''),
        datasets: [{
          label: 'Earnings (ETH)',
          data: earningsHistory,
          fill: false,
          borderColor: '#2ecc71',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
    
    // Helper to convert hex Wei to ETH decimal
    function weiHexToEth(hexWei) {
      // Remove 0x prefix, parse hex to BigInt, then convert to ETH string with decimals
      const wei = BigInt(hexWei);
      const eth = Number(wei) / 1e18;
      return eth.toFixed(5);
    }
    
    // Add log message
    function addLog(message, type = 'info') {
      const now = new Date();
      const timestamp = now.toLocaleTimeString();
      const logEntry = document.createElement('div');
      logEntry.className = 'log-entry';
      logEntry.innerHTML = `<span class="timestamp">[${timestamp}]</span> ${message}`;
      logs.appendChild(logEntry);
      logs.scrollTop = logs.scrollHeight;
    }
    
    // Show notification
    function showNotification(message, duration = 3000) {
      notificationElement.textContent = message;
      notificationElement.classList.add('show');
      setTimeout(() => {
        notificationElement.classList.remove('show');
      }, duration);
    }
    
    // Update wallet address
    function updateWallet() {
      const newWallet = walletAddressInput.value.trim();
      if (!newWallet) {
        showNotification('Please enter a valid wallet address', 3000);
        return;
      }
      
      // Simple Ethereum address validation
      if (!/^0x[a-fA-F0-9]{40}$/.test(newWallet)) {
        showNotification('Invalid Ethereum wallet address format', 3000);
        return;
      }
      
      wallet = newWallet;
      currentWalletDisplay.textContent = wallet;
      addLog(`Wallet updated to ${wallet}`);
      showNotification('Wallet address updated successfully', 3000);
      
      // Update balance for new wallet
      checkBalance();
    }
    
    // Simulate checking balance from Ethereum node
    async function checkBalance() {
      addLog(`Checking balance for wallet ${wallet}...`);
      
      try {
        // In a real implementation, this would use a Web3 library to connect to an Ethereum node
        // For this simulation, we'll use a random value with occasional small increments
        
        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        if (Math.random() > 0.5) {
          // Sometimes increase the balance slightly to simulate mining rewards
          balance += parseFloat((Math.random() * 0.0001).toFixed(5));
        }
        
        balanceDisplay.textContent = `${balance.toFixed(5)} ETH`;
        addLog(`Balance updated: ${balance.toFixed(5)} ETH`);
        
        // Update earnings history
        earningsHistory.push(balance);
        earningsHistory.shift();
        earningsChart.data.datasets[0].data = earningsHistory;
        earningsChart.update();
        
        networkStatusDisplay.textContent = 'Connected';
        networkStatusDisplay.style.color = '#2ecc71';
      } catch (error) {
        console.error('Error checking balance:', error);
        addLog(`Error checking balance: ${error.message}`, 'error');
        networkStatusDisplay.textContent = 'Connection Error';
        networkStatusDisplay.style.color = '#e74c3c';
      }
    }
    
    // Start mining simulation
    function startMining() {
      if (isMining) return;
      
      isMining = true;
      miningStatusDisplay.textContent = 'Active';
      miningStatusDisplay.style.color = '#2ecc71';
      startMiningButton.disabled = true;
      stopMiningButton.disabled = false;
      
      addLog('Mining started. Searching for blocks...');
      showNotification('Mining started successfully', 3000);
      
      // Simulate hashrate fluctuations
      hashrateInterval = setInterval(() => {
        // Random hashrate between 10 and 100 MH/s (simulated)
        hashrate = Math.floor(10000000 + Math.random() * 90000000);
        hashrateDisplay.textContent = `${(hashrate / 1000000).toFixed(2)} MH/s`;
        
        // Update hashrate history
        hashrateHistory.push(hashrate / 1000000);
        hashrateHistory.shift();
        hashrateChart.data.datasets[0].data = hashrateHistory;
        hashrateChart.update();
      }, 2000);
      
      // Simulate finding blocks occasionally
      miningInterval = setInterval(() => {
        // 5% chance of finding a block in each interval
        if (Math.random() < 0.05) {
          blocksMined++;
          blocksMinedDisplay.textContent = blocksMined;
          
          // Simulate a small reward
          const reward = parseFloat((Math.random() * 0.01).toFixed(5));
          balance += reward;
          balanceDisplay.textContent = `${balance.toFixed(5)} ETH`;
          
          addLog(`Block found! Reward: ${reward.toFixed(5)} ETH`);
          showNotification(`Block mined! +${reward.toFixed(5)} ETH`, 3000);
          
          // Update earnings history
          earningsHistory.push(balance);
          earningsHistory.shift();
          earningsChart.data.datasets[0].data = earningsHistory;
          earningsChart.update();
        } else {
          addLog(`Mining... Current hashrate: ${(hashrate / 1000000).toFixed(2)} MH/s`);
        }
      }, 10000); // Check for blocks every 10 seconds in this simulation
      
      // Periodically update balance
      balanceUpdateInterval = setInterval(checkBalance, 60000); // Check balance every minute
    }
    
    // Stop mining simulation
    function stopMining() {
      if (!isMining) return;
      
      isMining = false;
      miningStatusDisplay.textContent = 'Inactive';
      miningStatusDisplay.style.color = '#e74c3c';
      startMiningButton.disabled = false;
      stopMiningButton.disabled = true;
      
      clearInterval(hashrateInterval);
      clearInterval(miningInterval);
      clearInterval(balanceUpdateInterval);
      
      addLog('Mining stopped');
      showNotification('Mining stopped', 3000);
      
      // Reset hashrate display
      hashrate = 0;
      hashrateDisplay.textContent = '0 H/s';
    }
    
    // Event listeners
    startMiningButton.addEventListener('click', startMining);
    stopMiningButton.addEventListener('click', stopMining);
    checkBalanceButton.addEventListener('click', checkBalance);
    updateWalletButton.addEventListener('click', updateWallet);
    
    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      addLog('Dashboard initialized. Ready to start mining.');
      currentWalletDisplay.textContent = wallet;
      
      // Check initial connection to Ethereum node and balance
      setTimeout(() => {
        networkStatusDisplay.textContent = 'Connected';
        networkStatusDisplay.style.color = '#2ecc71';
        checkBalance();
      }, 1000);
    });
  </script>

</body>
</html>